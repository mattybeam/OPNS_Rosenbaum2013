num.tries=2
best.run=llply(seq(num.tries), function(l) optim(runif(2*numSites), to.minimize, control=list(maxit=10)), .parallel=T) %>%
ldply(function(l) data.frame(val=l$value, par=rbind(l$par))) %>%
filter(rank(val, ties.method="first")==1)
source('header.R')
best.run=llply(seq(num.tries), function(l) optim(runif(2*numSites), to.minimize, control=list(maxit=10)), .parallel=T) %>%
ldply(function(l) data.frame(val=l$value, par=rbind(l$par))) %>%
filter(rank(val, ties.method="first")==1)
library(doParallel)
registerDoParallel(cores=20)
best.run=llply(seq(num.tries), function(l) optim(runif(2*numSites), to.minimize, control=list(maxit=10)), .parallel=T) %>%
ldply(function(l) data.frame(val=l$value, par=rbind(l$par))) %>%
filter(rank(val, ties.method="first")==1)
num.tries=2
my.vars<-load.variables()
numSites=3
assemblers=my.vars$assemblers
competetors=my.vars$competetors
unionRate=my.vars$unionRate
beta=my.vars$costParam
C.bar<-function(assembly.loc, supplier.loc){
distance=sqrt(sum((assembly.loc-supplier.loc)^2))
unions=unionRate(supplier.loc$x, supplier.loc$y)
beta$distance*distance+beta$union*unions
}
expected.Nr<-function(assembly.loc, supplier.locs){
alply(supplier.locs, 1, function(s) -C.bar(assembly.loc, s)) %>%
unlist() %>%
exp() %>%
sum() %>%
log() %>%
prod(-1)
}
to.minimize<-function(supplier.loc.list){
supplier.locs=matrix(supplier.loc.list, nc=2) %>%
as.data.frame() %>%
select(x=V1, y=V2) %>%
rbind(as.matrix(competetors))
alply(assemblers, 1, function(s) expected.Nr(s, supplier.locs)) %>%
unlist() %>%
sum()
}
#Try at several starting values
num.tries=2
registerDoParallel(cores=20)
best.run=llply(seq(num.tries), function(l) optim(runif(2*numSites), to.minimize, control=list(maxit=10)), .parallel=T) %>%
ldply(function(l) data.frame(val=l$value, par=rbind(l$par))) %>%
filter(rank(val, ties.method="first")==1)
best.run
optim(runif(2*numSites), to.minimize, control=list(maxit=10))
best.run=llply(seq(num.tries), function(l) optim(runif(2*numSites), to.minimize, control=list(maxit=10)), .parallel=T) %>%
ldply(function(l) data.frame(val=l$value, convergence=l$convergence, par=rbind(l$par))) %>%
filter(rank(val, ties.method="first")==1)
best.run
list(
value=best.run$val,
supplier.locs=select(best.run, -c(val, convergence)) %>%
matrix(nc=2) %>%
as.data.frame() %>%
select(x=V1, y=V2)
)
value=best.run$val,
convergence=best.run$convergence,
supplier.locs=select(best.run, -c(val, convergence)) %>%
matrix(nc=2) %>%
as.data.frame() %>%
select(x=V1, y=V2)
)
}
value=best.run$val,
convergence=best.run$convergence,
supplier.locs=select(best.run, -c(val, convergence)) %>%
matrix(nc=2) %>%
as.data.frame() %>%
select(x=V1, y=V2)
)
}
list(
value=best.run$val,
convergence=best.run$convergence
supplier.locs=select(best.run, -c(val, convergence)) %>%
matrix(nc=2) %>%
as.data.frame() %>%
select(x=V1, y=V2)
)
list(
value=best.run$val,
convergence=best.run$convergence,
supplier.locs=select(best.run, -c(val, convergence)) %>%
matrix(nc=2) %>%
as.data.frame() %>%
select(x=V1, y=V2)
)
55-1
55-13
y=easy.load('solution.txt')
y
my.vars<-load.variables()
plot(y)
plot(y$x, y$y)
plot(y[[3]]$x, y[[3]]$y)
plot(my.vars$assemblers$x, my.vars$assemblers$y)
plot(my.vars$competetors$x, my.vars$competetors$y)
my.vars<-load.variables()
plot(my.vars$assemblers$x, my.vars$assemblers$y)
my.vars<-load.variables()
plot(my.vars$assemblers$x, my.vars$assemblers$y)
plot(y[[3]]$x, y[[3]]$y)
plot(my.vars$competetors$x, my.vars$competetors$y)
saveRDS(function(x, y) (x-1/2)^2+(y/4)^2, 'unionizationRate.rds')
y <- readRDS('unionizationRate.rds')
y
source('~/.active-rstudio-document')
makeData()
source('header.R')
.libPaths('/Users/robertbray/Dropbox/code/R/library/')
library('dplyr')
library('plyr')
library('doParallel')
registerDoParallel(cores=20)
l_ply(dir(ex.mods), function(l) source(paste(ex.mods, l, sep="")))
my.vars <- load.variables()
makeData()
source('~/Dropbox/teaching/OPNS523/assignments/OPNS_Rosenbaum2013/solution/code/modules/makeData.R')
makeData()
source('header.R')
makeData()
assembly.count<-12
competetor.count<-4
source('~/.active-rstudio-document')
makeData()
source('~/.active-rstudio-document')
makeData()
